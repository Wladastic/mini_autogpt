import json
import think.memory as memory
import think.prompt as prompt
import utils.llm as llm
from action.action_decisions import decide
from action.action_execute import take_action
from utils.log import log


def run_think():
    thinking = think()  # takes
    print("THOUGHTS : " + thinking)
    decision = decide(thinking)
    print("DECISIONS : " + str(decision))
    evaluated_decision = evaluate_decision(thinking, decision)
    print("EVALUATED DECISION : " + str(evaluated_decision))
    take_action(evaluated_decision)


def evaluate_decision(thoughts, decision):
    # combine thoughts and decision and ask llm to evaluate the decision json and output an improved one
    history = llm.build_prompt(prompt.evaluation_prompt)
    context = f"Thoughts: {thoughts} \n Decision: {decision}"
    history.append({"role": "user", "content": context})
    response = llm.llm_request(history)

    return response.json()["choices"][0]["message"]["content"]


def think():
    """
    Performs the thinking process and returns the thoughts generated by the assistant.

    Returns:
        str: The thoughts generated by the assistant.

    Raises:
        Exception: If there is an error in the thinking process.
    """
    log("*** I am thinking... ***")
    history = llm.build_prompt(prompt.thought_prompt)

    thought_history = memory.load_thought_history()
    thought_summaries = [json.loads(item)["summary"] for item in thought_history]

    history = llm.build_context(
        history=history,
        conversation_history=thought_summaries,
        message_history=memory.load_response_history()[-2:],
        # conversation_history=telegram.get_previous_message_history(),
        # message_history=telegram.get_last_few_messages(),
    )

    history.append(
        {
            "role": "user",
            "content": "Formulate your thoughts and explain them as detailed as you can.",
        },
    )

    response = llm.llm_request(history)
    if response.status_code == 200:
        # Extracting and printing the assistant's message
        thoughts = response.json()["choices"][0]["message"]["content"]
        log("*** I thinkk I have finished thinking! *** \n")
        memory.save_thought(thoughts, context=history)
        return thoughts
    else:
        log(response.status_code)
        raise Exception
